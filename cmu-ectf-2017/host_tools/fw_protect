#!/usr/bin/env python
"""

Copyright 2017 The MITRE Corporation

Modifications: Copyright 2017 Mark Horvath, Surbhi Shah, Tiemoko Ballo, Saurabh Sharma, Pouria Pezeshkian, Karthic Palaniappan

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied. See the License for the specific language governing
permissions and limitations under the License.


"""
"""
Firmware Bundle-and-Protect Tool

"""
import argparse
import shutil
import struct
import json
import zlib
import sys
from cStringIO import StringIO 
from intelhex import IntelHex
from Crypto.Cipher import AES # You need to run: pip install pycrypto
from Crypto.Hash import HMAC 
from Crypto.Hash import SHA
import Crypto 
import os
import binascii

from intelhex import hex2bin 

DEBUG = 1
key_size = 32 # in bytes 
release_message_max_size = 1024 
HMAC_LEN = 20 # in bytes for SHA1
BLOCKSIZE = AES.block_size
SEEDSIZE = 32 # in bytes 
PAGE_SIZE = 256
ENCRYPTED_MEASUREMENT_SIZE = 16+  2 + 20 + 20 + 6 # 16 (IV) + 2 (version) + 20 (measurement) + 20 (signature) + 6 (padding) 
pad = lambda s: s + (BLOCKSIZE - len(s) % BLOCKSIZE) * chr(BLOCKSIZE - len(s) % BLOCKSIZE)
unpad = lambda s : s[0:-ord(s[-1])]
###########################################################################################
'''
key : byte string 
data : byte string, data to be encrypted
'''
def sign(key, data):
    h = HMAC.new(key, digestmod=SHA)
    h.update(data)
    return h.digest()

###########################################################################################
def verify(key, data, signature):

    if len(signature) != HMAC_LEN:
        return False

    new_hash = HMAC.new(key, digestmod=SHA)
    new_hash.update(data)
    new_digest = new_hash.digest()

    i = 0
    success = True 
    while i < HMAC_LEN:
        if new_digest[i] != signature[i]:
            success = False
        i+=1 

    return success

###########################################################################################
'''
key : byte string 
data : byte string, data to be encrypted
'''
def encrypt_CBC(key, data):
    # key must be 16 bytes or 24 bytes or 32 bytes long. Depending on length, AES will work
    data = pad(data)
    #if DEBUG == 1 : print("After padding = ", byte_to_hex(data))
    iv = os.urandom(BLOCKSIZE) # Generate a random IV every time. Important!
    aes_obj = AES.new(key, AES.MODE_CBC, iv) # CBC mode requires a random IV every time 
    enc = aes_obj.encrypt(data)
    return iv + enc

###########################################################################################
def decrypt_CBC(key, data):
    # key must be 16 bytes or 24 bytes or 32 bytes long. Depending on length, AES will work
    iv = data[:BLOCKSIZE]
    aes_obj = AES.new(key, AES.MODE_CBC, iv) # CBC mode requires a random IV every time 
    return unpad(aes_obj.decrypt(data[BLOCKSIZE:]))

###########################################################################################
'''
key : byte string 
data : byte string, data to be encrypted
'''
def encrypt_ECB(key, data):
    # key must be 16 bytes or 24 bytes or 32 bytes long. Depending on length, AES will work
    data = pad(data)
    aes_obj = AES.new(key, AES.MODE_ECB) # CBC mode requires a random IV every time 
    enc = aes_obj.encrypt(data)
    return enc

###########################################################################################
def decrypt_ECB(key, data):
    # key must be 16 bytes or 24 bytes or 32 bytes long. Depending on length, AES will work
    aes_obj = AES.new(key, AES.MODE_ECB) 
    return unpad(aes_obj.decrypt(data))

###########################################################################################
def test(filename, key):
    with open(filename, 'rb') as encfile: 
        data = encfile.read()
        data = zlib.decompress(data)
        json_data = json.loads(data)
        hex_data = StringIO(json_data['hex_data'])

        reader = IntelHex(hex_data)
        binstr = reader.tobinstr()

        j = 0
        while j < len(binstr):
            # Read 304 bytes at a time 304 = 256 (page) + 20 (signature) + 12 (padding) + 16 (padding)
            print("For page starting from ", j)

            encrypted_page  = binstr[j:j+304]
            j += 304
            plaintext_page = decrypt_CBC(key, encrypted_page) # signed page does not have padding or IV
            print("Decrypted = ", byte_to_hex(plaintext_page))
            length = len(plaintext_page)
            print("Signature = ", byte_to_hex(plaintext_page[:20]))
            result = verify(key, plaintext_page[0:length-20], plaintext_page[-20:])
            print("Verifies = ", result)

###########################################################################################
def byte_to_hex( byteStr ):
    """
    Convert a byte string to it's hex string representation e.g. for output.
    """
    
    # Uses list comprehension which is a fractionally faster implementation than
    # the alternative, more readable, implementation below
    #   
    #    hex = []
    #    for aChar in byteStr:
    #        hex.append( "%02X " % ord( aChar ) )
    #
    #    return ''.join( hex ).strip()        

    return ''.join( [ "%02x" % ord( x ) for x in byteStr ] ).strip()

###########################################################################################
def hex_to_byte( hexStr ):
    """
    Convert a string hex byte values into a byte string. The Hex Byte values may
    or may not be space separated.
    """
    # The list comprehension implementation is fractionally slower in this case    
    #u
    #    hexStr = ''.join( hexStr.split(" ") )
    #    return ''.join( ["%c" % chr( int ( hexStr[i:i+2],16 ) ) \
    #                                   for i in range(0, len( hexStr ), 2) ] )
 
    bytes = []

    hexStr = ''.join( hexStr.split(" ") )

    for i in range(0, len(hexStr), 2):
        bytes.append( chr( int (hexStr[i:i+2], 16 ) ) )

    return ''.join( bytes )


###########################################################################################
def calc_hash(str):
    h = SHA.new()
    h.update(str)
    return h.digest()
###########################################################################################

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--infile",
                        help="Path to the firmware image to protect.",
                        required=True)
    parser.add_argument("--outfile", help="Filename for the output firmware.",
                        required=True)
    parser.add_argument("--version", help="Version number of this firmware.",
                        required=True)
    parser.add_argument("--message", help="Release message for this firmware.",
                        required=True)
    args = parser.parse_args()

    # Read firmware into a binary
    firmware = IntelHex()
    version = int(args.version) & 0xffff # Expecting a 16 bit number [See this again]
    #firmware[1] = version % 0x100  # version big endian 
    #firmware[0] = version / 0x100  # version 1st byte

    # Copy release message 
    message = args.message
    length = len(message)
    minimum = min(length, release_message_max_size)
    i = 0
    while i < minimum:                     # append release message 
        firmware[i] = ord(message[i])
        i += 1
    while i < release_message_max_size:  # fill the extra space with null characters 
        firmware[i] = 0
        i += 1

    
    random_seed = os.urandom(SEEDSIZE) # append random seed to introduce entropy on bootloader
    if DEBUG == 1 : print("Random seed = ",byte_to_hex(random_seed) )

    j = 0 
    while j < SEEDSIZE : 
        firmware[i] = ord(random_seed[j])
        i += 1
        j += 1

    while ((i%PAGE_SIZE) != 0) : # Fill up the page with ff so as to fill up a page
        firmware[i] = 0xff
        i+=1
        #print("i=", i)
        #print("i%PAGE_SIZE=", (i%PAGE_SIZE))

   
    # Copy firmware code 
    code = IntelHex(args.infile)

    if DEBUG == 1 : print("Length of firmware:", len(code.tobinstr()))
    if DEBUG == 1 : print("Firmware = ", byte_to_hex(code.tobinstr()))

    #code_size = code.maxaddr() + 1
    code_size = len(code) + 1

    j = 0
    while j < code_size:                # Fill code of firmware 
        firmware[i] = code[j+code.minaddr()]
        i += 1
        j += 1
    
    # Sign firmware 
    # Get key from file
    with open("secret_configure_output.txt", 'rb') as fw_file:
            data = fw_file.read()

    keyStr = data
    key = hex_to_byte(keyStr)
    
    if DEBUG == 1 : print("Key = ",key )
    if DEBUG == 1 : print("Length of key = ", len(key))


    # HMAC 256 bytes of data at a time and then encrypt 
    firmware_str = firmware.tobinstr()
    enc_firmware = IntelHex()
    i = 0 # i is index of enc_firmware
    j = 0

    page_no = 0

    while j < len(firmware_str):
     
        page_no += 1
        
        if DEBUG == 1 : 
            print
            print
            print("For page starting from ", j)
        
        page = b''
        page += chr(version / 0x100)
        page += chr(version % 0x100)
        page += firmware_str[j:j+256] # length of each page is 256 bytes 
        j = j + 256
        
        if DEBUG == 1 : 
            print("Page = ", byte_to_hex(page))
            print("Length of page = ", len(page))

        page_len = len(page)
        signature = sign(key, page) # length of signature is 20 bytes 

        if page_no == 1 : # Creating hash chains, for the first page  
            hash_chain1 = signature
        else :
            hash_chain2 = signature 
            hash_new = calc_hash(hash_chain1 + hash_chain2)
            hash_chain1 = hash_new
        
        # append signature 
        k = 0
        while k < HMAC_LEN: 
            page  = page + signature[k]
            k += 1
        
        if DEBUG == 1 : 
            print("Signature = ", byte_to_hex(signature))
            print("Length of signature = ", len(signature))
            print("Length of page = ", len(page))

        # encrypt page 
        encrypted_page = encrypt_CBC(key, page)
        if DEBUG == 1 : 
            print("Encrypted Page = ", byte_to_hex(encrypted_page))
            print("Length of encrypted page = ", len(encrypted_page))
        
        # copy encrypted page to enc_firmware 
        k = 0
        while k < len(encrypted_page): 
            enc_firmware[i] = ord(encrypted_page[k])
            i += 1
            k += 1

        if DEBUG == 1 : print("Length of encrypted firmware is now ", i)

    
    # sign and encrypt hash_chain measurement and append it to encrypted firmware
    # hash_chain1 is the measurement for the entire firmware + release message 
    payload = b''
    payload += chr(version / 0x100)
    payload += chr(version % 0x100)
    payload += hash_chain1

    signature = sign(key, payload)
    measurement = payload + signature
    encrypted_measurement = encrypt_CBC(key, measurement)

    if DEBUG == 1 : 
        print("Hash chain = ", byte_to_hex(hash_chain1))
        print("Version along with hash chain = ", byte_to_hex(payload))
        print("Length of signature of hash chain = ", len(signature))
        print("Length of measurement = ", len(measurement))
        print("Encrypted measurement = ", byte_to_hex(encrypted_measurement))

    # Append measurement at the end of encrypted firmware 
    k=0
    while k < len(encrypted_measurement):
        enc_firmware[i] = ord(encrypted_measurement[k])
        i += 1 
        k += 1
    
    if DEBUG == 1 : 
        print("Length of encrypted firmware is now = ", len(enc_firmware)) 
    
    # Write encrypted firmware to file 
    sio = StringIO()
    enc_firmware.write_hex_file(sio)
    hex_data = sio.getvalue()
    length_enc = len(enc_firmware)
    # Encode the data as json and write to outfile.
    data = {
        'size' : length_enc,
        'hex_data' : hex_data
    }

    with open(args.outfile, 'wb+') as outfile:
        data = json.dumps(data)
        data = zlib.compress(data)
        outfile.write(data)

    
